// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef PAYMENT_ODB_HXX
#define PAYMENT_ODB_HXX

// Begin prologue.
//
#include <odb/boost/smart-ptr/pointer-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "payment.hxx"

#include "bill-odb.hxx"
#include "branch-odb.hxx"
#include "customer-odb.hxx"
#include "meter-odb.hxx"
#include "unit-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // payments
  //
  template <>
  struct class_traits< ::payments >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::payments >
  {
    public:
    typedef ::payments object_type;
    typedef ::boost::shared_ptr< ::payments > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // payments
  //
  template <typename A>
  struct pointer_query_columns< ::payments, id_mysql, A >
  {
    // pay_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_id_type_;

    static const pay_id_type_ pay_id;

    // pay_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_unique_type_;

    static const pay_unique_type_ pay_unique;

    // pay_bill
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_bill_type_;

    static const pay_bill_type_ pay_bill;

    // pay_customer
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_customer_type_;

    static const pay_customer_type_ pay_customer;

    // pay_method
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_method_type_;

    static const pay_method_type_ pay_method;

    // pay_type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_type_type_;

    static const pay_type_type_ pay_type;

    // pay_amount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_amount_type_;

    static const pay_amount_type_ pay_amount;

    // pay_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_reg_date_type_;

    static const pay_reg_date_type_ pay_reg_date;
  };

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_id_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_id (A::table_name, "`pay_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_unique_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_unique (A::table_name, "`pay_unique`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_bill_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_bill (A::table_name, "`pay_bill`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_customer_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_customer (A::table_name, "`pay_customer`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_method_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_method (A::table_name, "`pay_method`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_type_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_type (A::table_name, "`pay_type`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_amount_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_amount (A::table_name, "`pay_amount`", 0);

  template <typename A>
  const typename pointer_query_columns< ::payments, id_mysql, A >::pay_reg_date_type_
  pointer_query_columns< ::payments, id_mysql, A >::
  pay_reg_date (A::table_name, "`pay_reg_date`", 0);

  template <>
  class access::object_traits_impl< ::payments, id_mysql >:
    public access::object_traits< ::payments >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // pay_id
      //
      unsigned long long pay_id_value;
      my_bool pay_id_null;

      // pay_unique
      //
      details::buffer pay_unique_value;
      unsigned long pay_unique_size;
      my_bool pay_unique_null;

      // pay_bill
      //
      unsigned long long pay_bill_value;
      my_bool pay_bill_null;

      // pay_customer
      //
      unsigned long long pay_customer_value;
      my_bool pay_customer_null;

      // pay_method
      //
      details::buffer pay_method_value;
      unsigned long pay_method_size;
      my_bool pay_method_null;

      // pay_type
      //
      details::buffer pay_type_value;
      unsigned long pay_type_size;
      my_bool pay_type_null;

      // pay_amount
      //
      details::buffer pay_amount_value;
      unsigned long pay_amount_size;
      my_bool pay_amount_null;

      // pay_reg_date
      //
      details::buffer pay_reg_date_value;
      unsigned long pay_reg_date_size;
      my_bool pay_reg_date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct pay_bill_tag;
    struct pay_customer_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::payments, id_common >:
    public access::object_traits_impl< ::payments, id_mysql >
  {
  };

  // payments
  //
  template <>
  struct alias_traits<
    ::bill,
    id_mysql,
    access::object_traits_impl< ::payments, id_mysql >::pay_bill_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::customer,
    id_mysql,
    access::object_traits_impl< ::payments, id_mysql >::pay_customer_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::payments, id_mysql >
  {
    // pay_bill
    //
    typedef
    odb::alias_traits<
      ::bill,
      id_mysql,
      access::object_traits_impl< ::payments, id_mysql >::pay_bill_tag>
    pay_bill_alias_;

    // pay_customer
    //
    typedef
    odb::alias_traits<
      ::customer,
      id_mysql,
      access::object_traits_impl< ::payments, id_mysql >::pay_customer_tag>
    pay_customer_alias_;
  };

  template <typename A>
  struct query_columns< ::payments, id_mysql, A >:
    query_columns_base< ::payments, id_mysql >
  {
    // pay_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_id_type_;

    static const pay_id_type_ pay_id;

    // pay_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_unique_type_;

    static const pay_unique_type_ pay_unique;

    // pay_bill
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_bill_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::bill,
        id_mysql,
        pay_bill_alias_ > >
    pay_bill_pointer_type_;

    struct pay_bill_type_: pay_bill_pointer_type_, pay_bill_column_type_
    {
      pay_bill_type_ (const char* t, const char* c, const char* conv)
        : pay_bill_column_type_ (t, c, conv)
      {
      }
    };

    static const pay_bill_type_ pay_bill;

    // pay_customer
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    pay_customer_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::customer,
        id_mysql,
        pay_customer_alias_ > >
    pay_customer_pointer_type_;

    struct pay_customer_type_: pay_customer_pointer_type_, pay_customer_column_type_
    {
      pay_customer_type_ (const char* t, const char* c, const char* conv)
        : pay_customer_column_type_ (t, c, conv)
      {
      }
    };

    static const pay_customer_type_ pay_customer;

    // pay_method
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_method_type_;

    static const pay_method_type_ pay_method;

    // pay_type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_type_type_;

    static const pay_type_type_ pay_type;

    // pay_amount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_amount_type_;

    static const pay_amount_type_ pay_amount;

    // pay_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    pay_reg_date_type_;

    static const pay_reg_date_type_ pay_reg_date;
  };

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_id_type_
  query_columns< ::payments, id_mysql, A >::
  pay_id (A::table_name, "`pay_id`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_unique_type_
  query_columns< ::payments, id_mysql, A >::
  pay_unique (A::table_name, "`pay_unique`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_bill_type_
  query_columns< ::payments, id_mysql, A >::
  pay_bill (A::table_name, "`pay_bill`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_customer_type_
  query_columns< ::payments, id_mysql, A >::
  pay_customer (A::table_name, "`pay_customer`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_method_type_
  query_columns< ::payments, id_mysql, A >::
  pay_method (A::table_name, "`pay_method`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_type_type_
  query_columns< ::payments, id_mysql, A >::
  pay_type (A::table_name, "`pay_type`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_amount_type_
  query_columns< ::payments, id_mysql, A >::
  pay_amount (A::table_name, "`pay_amount`", 0);

  template <typename A>
  const typename query_columns< ::payments, id_mysql, A >::pay_reg_date_type_
  query_columns< ::payments, id_mysql, A >::
  pay_reg_date (A::table_name, "`pay_reg_date`", 0);
}

#include "payment-odb.ixx"

#include <odb/post.hxx>

#endif // PAYMENT_ODB_HXX
