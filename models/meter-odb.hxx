// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef METER_ODB_HXX
#define METER_ODB_HXX

// Begin prologue.
//
#include <odb/boost/smart-ptr/pointer-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "meter.hxx"

#include "branch-odb.hxx"
#include "customer-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // meter
  //
  template <>
  struct class_traits< ::meter >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::meter >
  {
    public:
    typedef ::meter object_type;
    typedef ::boost::shared_ptr< ::meter > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // meter
  //
  template <typename A>
  struct pointer_query_columns< ::meter, id_mysql, A >
  {
    // meter_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    meter_id_type_;

    static const meter_id_type_ meter_id;

    // meter_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_unique_type_;

    static const meter_unique_type_ meter_unique;

    // meter_customer
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    meter_customer_type_;

    static const meter_customer_type_ meter_customer;

    // meter_owner
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_owner_type_;

    static const meter_owner_type_ meter_owner;

    // meter_number
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_number_type_;

    static const meter_number_type_ meter_number;

    // meter_intital_unit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_intital_unit_type_;

    static const meter_intital_unit_type_ meter_intital_unit;

    // meter_joinging_price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_joinging_price_type_;

    static const meter_joinging_price_type_ meter_joinging_price;

    // meter_lock
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    meter_lock_type_;

    static const meter_lock_type_ meter_lock;

    // meter_in_service
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_in_service_type_;

    static const meter_in_service_type_ meter_in_service;

    // meter_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_reg_date_type_;

    static const meter_reg_date_type_ meter_reg_date;
  };

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_id_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_id (A::table_name, "`meter_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_unique_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_unique (A::table_name, "`meter_unique`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_customer_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_customer (A::table_name, "`meter_customer`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_owner_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_owner (A::table_name, "`meter_owner`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_number_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_number (A::table_name, "`meter_number`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_intital_unit_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_intital_unit (A::table_name, "`meter_intital_unit`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_joinging_price_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_joinging_price (A::table_name, "`meter_joinging_price`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_lock_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_lock (A::table_name, "`meter_lock`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_in_service_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_in_service (A::table_name, "`meter_in_service`", 0);

  template <typename A>
  const typename pointer_query_columns< ::meter, id_mysql, A >::meter_reg_date_type_
  pointer_query_columns< ::meter, id_mysql, A >::
  meter_reg_date (A::table_name, "`meter_reg_date`", 0);

  template <>
  class access::object_traits_impl< ::meter, id_mysql >:
    public access::object_traits< ::meter >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // meter_id
      //
      unsigned long long meter_id_value;
      my_bool meter_id_null;

      // meter_unique
      //
      details::buffer meter_unique_value;
      unsigned long meter_unique_size;
      my_bool meter_unique_null;

      // meter_customer
      //
      unsigned long long meter_customer_value;
      my_bool meter_customer_null;

      // meter_owner
      //
      details::buffer meter_owner_value;
      unsigned long meter_owner_size;
      my_bool meter_owner_null;

      // meter_number
      //
      details::buffer meter_number_value;
      unsigned long meter_number_size;
      my_bool meter_number_null;

      // meter_intital_unit
      //
      details::buffer meter_intital_unit_value;
      unsigned long meter_intital_unit_size;
      my_bool meter_intital_unit_null;

      // meter_joinging_price
      //
      details::buffer meter_joinging_price_value;
      unsigned long meter_joinging_price_size;
      my_bool meter_joinging_price_null;

      // meter_lock
      //
      mysql::value_traits< ::std::string, mysql::id_enum >::image_type meter_lock_value;
      unsigned long meter_lock_size;
      my_bool meter_lock_null;

      // meter_in_service
      //
      details::buffer meter_in_service_value;
      unsigned long meter_in_service_size;
      my_bool meter_in_service_null;

      // meter_reg_date
      //
      details::buffer meter_reg_date_value;
      unsigned long meter_reg_date_size;
      my_bool meter_reg_date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct meter_customer_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 10UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::meter, id_common >:
    public access::object_traits_impl< ::meter, id_mysql >
  {
  };

  // meter
  //
  template <>
  struct alias_traits<
    ::customer,
    id_mysql,
    access::object_traits_impl< ::meter, id_mysql >::meter_customer_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::meter, id_mysql >
  {
    // meter_customer
    //
    typedef
    odb::alias_traits<
      ::customer,
      id_mysql,
      access::object_traits_impl< ::meter, id_mysql >::meter_customer_tag>
    meter_customer_alias_;
  };

  template <typename A>
  struct query_columns< ::meter, id_mysql, A >:
    query_columns_base< ::meter, id_mysql >
  {
    // meter_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    meter_id_type_;

    static const meter_id_type_ meter_id;

    // meter_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_unique_type_;

    static const meter_unique_type_ meter_unique;

    // meter_customer
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    meter_customer_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::customer,
        id_mysql,
        meter_customer_alias_ > >
    meter_customer_pointer_type_;

    struct meter_customer_type_: meter_customer_pointer_type_, meter_customer_column_type_
    {
      meter_customer_type_ (const char* t, const char* c, const char* conv)
        : meter_customer_column_type_ (t, c, conv)
      {
      }
    };

    static const meter_customer_type_ meter_customer;

    // meter_owner
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_owner_type_;

    static const meter_owner_type_ meter_owner;

    // meter_number
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_number_type_;

    static const meter_number_type_ meter_number;

    // meter_intital_unit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_intital_unit_type_;

    static const meter_intital_unit_type_ meter_intital_unit;

    // meter_joinging_price
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_joinging_price_type_;

    static const meter_joinging_price_type_ meter_joinging_price;

    // meter_lock
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    meter_lock_type_;

    static const meter_lock_type_ meter_lock;

    // meter_in_service
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_in_service_type_;

    static const meter_in_service_type_ meter_in_service;

    // meter_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    meter_reg_date_type_;

    static const meter_reg_date_type_ meter_reg_date;
  };

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_id_type_
  query_columns< ::meter, id_mysql, A >::
  meter_id (A::table_name, "`meter_id`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_unique_type_
  query_columns< ::meter, id_mysql, A >::
  meter_unique (A::table_name, "`meter_unique`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_customer_type_
  query_columns< ::meter, id_mysql, A >::
  meter_customer (A::table_name, "`meter_customer`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_owner_type_
  query_columns< ::meter, id_mysql, A >::
  meter_owner (A::table_name, "`meter_owner`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_number_type_
  query_columns< ::meter, id_mysql, A >::
  meter_number (A::table_name, "`meter_number`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_intital_unit_type_
  query_columns< ::meter, id_mysql, A >::
  meter_intital_unit (A::table_name, "`meter_intital_unit`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_joinging_price_type_
  query_columns< ::meter, id_mysql, A >::
  meter_joinging_price (A::table_name, "`meter_joinging_price`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_lock_type_
  query_columns< ::meter, id_mysql, A >::
  meter_lock (A::table_name, "`meter_lock`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_in_service_type_
  query_columns< ::meter, id_mysql, A >::
  meter_in_service (A::table_name, "`meter_in_service`", 0);

  template <typename A>
  const typename query_columns< ::meter, id_mysql, A >::meter_reg_date_type_
  query_columns< ::meter, id_mysql, A >::
  meter_reg_date (A::table_name, "`meter_reg_date`", 0);
}

#include "meter-odb.ixx"

#include <odb/post.hxx>

#endif // METER_ODB_HXX
