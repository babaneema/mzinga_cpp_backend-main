// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EMPLOYEE_ODB_HXX
#define EMPLOYEE_ODB_HXX

// Begin prologue.
//
#include <odb/boost/smart-ptr/pointer-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "employee.hxx"

#include "branch-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // employee
  //
  template <>
  struct class_traits< ::employee >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employee >
  {
    public:
    typedef ::employee object_type;
    typedef ::boost::shared_ptr< ::employee > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // employee
  //
  template <typename A>
  struct pointer_query_columns< ::employee, id_mysql, A >
  {
    // employee_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    employee_id_type_;

    static const employee_id_type_ employee_id;

    // employee_branch
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    employee_branch_type_;

    static const employee_branch_type_ employee_branch;

    // employee_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_unique_type_;

    static const employee_unique_type_ employee_unique;

    // employee_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_name_type_;

    static const employee_name_type_ employee_name;

    // employee_gender
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_gender_type_;

    static const employee_gender_type_ employee_gender;

    // employee_contact
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_contact_type_;

    static const employee_contact_type_ employee_contact;

    // employee_address
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_address_type_;

    static const employee_address_type_ employee_address;

    // employee_administrative
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_administrative_type_;

    static const employee_administrative_type_ employee_administrative;

    // employee_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_reg_date_type_;

    static const employee_reg_date_type_ employee_reg_date;
  };

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_id_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_id (A::table_name, "`employee_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_branch_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_branch (A::table_name, "`employee_branch`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_unique_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_unique (A::table_name, "`employee_unique`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_name_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_name (A::table_name, "`employee_name`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_gender_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_gender (A::table_name, "`employee_gender`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_contact_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_contact (A::table_name, "`employee_contact`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_address_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_address (A::table_name, "`employee_address`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_administrative_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_administrative (A::table_name, "`employee_administrative`", 0);

  template <typename A>
  const typename pointer_query_columns< ::employee, id_mysql, A >::employee_reg_date_type_
  pointer_query_columns< ::employee, id_mysql, A >::
  employee_reg_date (A::table_name, "`employee_reg_date`", 0);

  template <>
  class access::object_traits_impl< ::employee, id_mysql >:
    public access::object_traits< ::employee >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // employee_id
      //
      unsigned long long employee_id_value;
      my_bool employee_id_null;

      // employee_branch
      //
      unsigned long long employee_branch_value;
      my_bool employee_branch_null;

      // employee_unique
      //
      details::buffer employee_unique_value;
      unsigned long employee_unique_size;
      my_bool employee_unique_null;

      // employee_name
      //
      details::buffer employee_name_value;
      unsigned long employee_name_size;
      my_bool employee_name_null;

      // employee_gender
      //
      details::buffer employee_gender_value;
      unsigned long employee_gender_size;
      my_bool employee_gender_null;

      // employee_contact
      //
      details::buffer employee_contact_value;
      unsigned long employee_contact_size;
      my_bool employee_contact_null;

      // employee_address
      //
      details::buffer employee_address_value;
      unsigned long employee_address_size;
      my_bool employee_address_null;

      // employee_administrative
      //
      details::buffer employee_administrative_value;
      unsigned long employee_administrative_size;
      my_bool employee_administrative_null;

      // employee_reg_date
      //
      details::buffer employee_reg_date_value;
      unsigned long employee_reg_date_size;
      my_bool employee_reg_date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct employee_branch_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employee, id_common >:
    public access::object_traits_impl< ::employee, id_mysql >
  {
  };

  // employee
  //
  template <>
  struct alias_traits<
    ::branch,
    id_mysql,
    access::object_traits_impl< ::employee, id_mysql >::employee_branch_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::employee, id_mysql >
  {
    // employee_branch
    //
    typedef
    odb::alias_traits<
      ::branch,
      id_mysql,
      access::object_traits_impl< ::employee, id_mysql >::employee_branch_tag>
    employee_branch_alias_;
  };

  template <typename A>
  struct query_columns< ::employee, id_mysql, A >:
    query_columns_base< ::employee, id_mysql >
  {
    // employee_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    employee_id_type_;

    static const employee_id_type_ employee_id;

    // employee_branch
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    employee_branch_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::branch,
        id_mysql,
        employee_branch_alias_ > >
    employee_branch_pointer_type_;

    struct employee_branch_type_: employee_branch_pointer_type_, employee_branch_column_type_
    {
      employee_branch_type_ (const char* t, const char* c, const char* conv)
        : employee_branch_column_type_ (t, c, conv)
      {
      }
    };

    static const employee_branch_type_ employee_branch;

    // employee_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_unique_type_;

    static const employee_unique_type_ employee_unique;

    // employee_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_name_type_;

    static const employee_name_type_ employee_name;

    // employee_gender
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_gender_type_;

    static const employee_gender_type_ employee_gender;

    // employee_contact
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_contact_type_;

    static const employee_contact_type_ employee_contact;

    // employee_address
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_address_type_;

    static const employee_address_type_ employee_address;

    // employee_administrative
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_administrative_type_;

    static const employee_administrative_type_ employee_administrative;

    // employee_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    employee_reg_date_type_;

    static const employee_reg_date_type_ employee_reg_date;
  };

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_id_type_
  query_columns< ::employee, id_mysql, A >::
  employee_id (A::table_name, "`employee_id`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_branch_type_
  query_columns< ::employee, id_mysql, A >::
  employee_branch (A::table_name, "`employee_branch`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_unique_type_
  query_columns< ::employee, id_mysql, A >::
  employee_unique (A::table_name, "`employee_unique`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_name_type_
  query_columns< ::employee, id_mysql, A >::
  employee_name (A::table_name, "`employee_name`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_gender_type_
  query_columns< ::employee, id_mysql, A >::
  employee_gender (A::table_name, "`employee_gender`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_contact_type_
  query_columns< ::employee, id_mysql, A >::
  employee_contact (A::table_name, "`employee_contact`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_address_type_
  query_columns< ::employee, id_mysql, A >::
  employee_address (A::table_name, "`employee_address`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_administrative_type_
  query_columns< ::employee, id_mysql, A >::
  employee_administrative (A::table_name, "`employee_administrative`", 0);

  template <typename A>
  const typename query_columns< ::employee, id_mysql, A >::employee_reg_date_type_
  query_columns< ::employee, id_mysql, A >::
  employee_reg_date (A::table_name, "`employee_reg_date`", 0);
}

#include "employee-odb.ixx"

#include <odb/post.hxx>

#endif // EMPLOYEE_ODB_HXX
