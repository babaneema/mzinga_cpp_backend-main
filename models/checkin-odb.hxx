// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CHECKIN_ODB_HXX
#define CHECKIN_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "checkin.hxx"

#include "employee-odb.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // checkin
  //
  template <>
  struct class_traits< ::checkin >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::checkin >
  {
    public:
    typedef ::checkin object_type;
    typedef ::checkin* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // checkin
  //
  template <typename A>
  struct query_columns< ::checkin, id_mysql, A >
  {
    // checkin_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    checkin_id_type_;

    static const checkin_id_type_ checkin_id;

    // checkin_unique
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    checkin_unique_type_;

    static const checkin_unique_type_ checkin_unique;

    // checkin_employee
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        int,
        mysql::id_long >::query_type,
      mysql::id_long >
    checkin_employee_type_;

    static const checkin_employee_type_ checkin_employee;

    // checkin_in
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    checkin_in_type_;

    static const checkin_in_type_ checkin_in;

    // checkin_out
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    checkin_out_type_;

    static const checkin_out_type_ checkin_out;

    // checkin_reg_date
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    checkin_reg_date_type_;

    static const checkin_reg_date_type_ checkin_reg_date;
  };

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_id_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_id (A::table_name, "`checkin_id`", 0);

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_unique_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_unique (A::table_name, "`checkin_unique`", 0);

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_employee_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_employee (A::table_name, "`checkin_employee`", 0);

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_in_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_in (A::table_name, "`checkin_in`", 0);

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_out_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_out (A::table_name, "`checkin_out`", 0);

  template <typename A>
  const typename query_columns< ::checkin, id_mysql, A >::checkin_reg_date_type_
  query_columns< ::checkin, id_mysql, A >::
  checkin_reg_date (A::table_name, "`checkin_reg_date`", 0);

  template <typename A>
  struct pointer_query_columns< ::checkin, id_mysql, A >:
    query_columns< ::checkin, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::checkin, id_mysql >:
    public access::object_traits< ::checkin >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // checkin_id
      //
      unsigned long long checkin_id_value;
      my_bool checkin_id_null;

      // checkin_unique
      //
      details::buffer checkin_unique_value;
      unsigned long checkin_unique_size;
      my_bool checkin_unique_null;

      // checkin_employee
      //
      int checkin_employee_value;
      my_bool checkin_employee_null;

      // checkin_in
      //
      details::buffer checkin_in_value;
      unsigned long checkin_in_size;
      my_bool checkin_in_null;

      // checkin_out
      //
      details::buffer checkin_out_value;
      unsigned long checkin_out_size;
      my_bool checkin_out_null;

      // checkin_reg_date
      //
      details::buffer checkin_reg_date_value;
      unsigned long checkin_reg_date_size;
      my_bool checkin_reg_date_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::checkin, id_common >:
    public access::object_traits_impl< ::checkin, id_mysql >
  {
  };

  // checkin
  //
}

#include "checkin-odb.ixx"

#include <odb/post.hxx>

#endif // CHECKIN_ODB_HXX
